#!/bin/bash

# RentFlow AI Backend - Quick Setup Script
# This script automates the backend setup process

set -e  # Exit on error

echo "üöÄ RentFlow AI Backend Setup"
echo "=============================="
echo ""

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js is not installed${NC}"
    echo "Please install Node.js 18+ from https://nodejs.org"
    exit 1
fi

NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    echo -e "${RED}‚ùå Node.js version must be 18 or higher${NC}"
    echo "Current version: $(node -v)"
    exit 1
fi

echo -e "${GREEN}‚úÖ Node.js $(node -v) detected${NC}"

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    echo -e "${RED}‚ùå npm is not installed${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ npm $(npm -v) detected${NC}"
echo ""

# Create directory structure
echo "üìÅ Creating directory structure..."
mkdir -p src tests

# Install dependencies
echo "üì¶ Installing dependencies..."
npm install

echo -e "${GREEN}‚úÖ Dependencies installed${NC}"
echo ""

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    echo "‚öôÔ∏è  Creating .env file..."
    cp .env.example .env
    echo -e "${YELLOW}‚ö†Ô∏è  Please edit .env with your actual configuration${NC}"
    echo ""
else
    echo -e "${YELLOW}‚ö†Ô∏è  .env file already exists, skipping...${NC}"
    echo ""
fi

# Check if required environment variables are set
echo "üîç Checking environment configuration..."

required_vars=(
    "ARC_RPC_URL"
    "CONTRACT_ADDRESS"
    "AI_WALLET_PRIVATE_KEY"
    "OPENAI_API_KEY"
    "SUPABASE_URL"
    "SUPABASE_KEY"
)

missing_vars=()

for var in "${required_vars[@]}"; do
    if ! grep -q "^${var}=.\+" .env 2>/dev/null; then
        missing_vars+=("$var")
    fi
done

if [ ${#missing_vars[@]} -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All required environment variables configured${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Missing or empty environment variables:${NC}"
    for var in "${missing_vars[@]}"; do
        echo "   - $var"
    done
    echo ""
    echo "Please edit .env and fill in these values"
fi

echo ""

# Test OpenAI API key if provided
if grep -q "^OPENAI_API_KEY=sk-" .env 2>/dev/null; then
    echo "ü§ñ Testing OpenAI API connection..."
    OPENAI_KEY=$(grep "^OPENAI_API_KEY=" .env | cut -d'=' -f2)
    
    response=$(curl -s -w "\n%{http_code}" -X GET "https://api.openai.com/v1/models" \
        -H "Authorization: Bearer $OPENAI_KEY" 2>/dev/null || echo "000")
    
    http_code=$(echo "$response" | tail -n1)
    
    if [ "$http_code" = "200" ]; then
        echo -e "${GREEN}‚úÖ OpenAI API connection successful${NC}"
    else
        echo -e "${RED}‚ùå OpenAI API connection failed (HTTP $http_code)${NC}"
        echo "   Please check your OPENAI_API_KEY"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  OpenAI API key not configured${NC}"
fi

echo ""

# Test Supabase connection if provided
if grep -q "^SUPABASE_URL=https://" .env 2>/dev/null; then
    echo "üíæ Testing Supabase connection..."
    SUPABASE_URL=$(grep "^SUPABASE_URL=" .env | cut -d'=' -f2)
    SUPABASE_KEY=$(grep "^SUPABASE_KEY=" .env | cut -d'=' -f2)
    
    response=$(curl -s -w "\n%{http_code}" -X GET "$SUPABASE_URL/rest/v1/" \
        -H "apikey: $SUPABASE_KEY" 2>/dev/null || echo "000")
    
    http_code=$(echo "$response" | tail -n1)
    
    if [ "$http_code" = "200" ]; then
        echo -e "${GREEN}‚úÖ Supabase connection successful${NC}"
    else
        echo -e "${RED}‚ùå Supabase connection failed (HTTP $http_code)${NC}"
        echo "   Please check your SUPABASE_URL and SUPABASE_KEY"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Supabase credentials not configured${NC}"
fi

echo ""

# Test Arc RPC connection if provided
if grep -q "^ARC_RPC_URL=https://" .env 2>/dev/null; then
    echo "‚õìÔ∏è  Testing Arc blockchain connection..."
    ARC_RPC=$(grep "^ARC_RPC_URL=" .env | cut -d'=' -f2)
    
    response=$(curl -s -X POST "$ARC_RPC" \
        -H "Content-Type: application/json" \
        -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' 2>/dev/null || echo "error")
    
    if echo "$response" | grep -q "result"; then
        block_number=$(echo "$response" | grep -o '"result":"[^"]*"' | cut -d'"' -f4)
        block_decimal=$((16#${block_number:2}))
        echo -e "${GREEN}‚úÖ Arc blockchain connection successful (block: $block_decimal)${NC}"
    else
        echo -e "${RED}‚ùå Arc blockchain connection failed${NC}"
        echo "   Please check your ARC_RPC_URL"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Arc RPC URL not configured${NC}"
fi

echo ""
echo "=============================="
echo ""

# Run type check
echo "üîç Running type check..."
if npm run type-check; then
    echo -e "${GREEN}‚úÖ Type check passed${NC}"
else
    echo -e "${RED}‚ùå Type check failed${NC}"
    echo "   Please fix TypeScript errors before running"
fi

echo ""

# Summary
echo "üìã Setup Summary"
echo "=============================="
echo ""

if [ ${#missing_vars[@]} -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Configuration complete${NC}"
    echo ""
    echo "You can now start the backend:"
    echo ""
    echo "  Development mode:"
    echo "  $ npm run dev"
    echo ""
    echo "  Production mode:"
    echo "  $ npm run build"
    echo "  $ npm start"
    echo ""
    echo "  Run tests:"
    echo "  $ npm test"
    echo ""
    echo "  Health check:"
    echo "  $ curl http://localhost:3001/api/health"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Configuration incomplete${NC}"
    echo ""
    echo "Please complete the following steps:"
    echo ""
    echo "1. Edit .env file:"
    echo "   $ nano .env"
    echo ""
    echo "2. Fill in missing variables:"
    for var in "${missing_vars[@]}"; do
        echo "   - $var"
    done
    echo ""
    echo "3. Run this script again:"
    echo "   $ ./setup.sh"
fi

echo ""
echo "=============================="
echo ""
echo "üìö Documentation:"
echo "   - README: ./README.md"
echo "   - API Docs: ../docs/API.md"
echo "   - Architecture: ../docs/ARCHITECTURE.md"
echo ""
echo "üêõ Issues? Check troubleshooting in README.md"
echo "üí¨ Need help? team@rentflow.ai"
echo ""
echo "‚ú® Good luck with the hackathon! üöÄ"
echo ""
